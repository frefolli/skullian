;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node  => type = "push_symbol", node_symbol = node, is_reference
attribute node_symbol = node     => symbol = (source-text node), source_node = node

;; file level

(translation_unit)@tu {
  node @tu.scope
}

;; functions
(function_definition
  type: (_)@type
  declarator: (function_declarator (identifier)@name parameters: (parameter_list)@params)@declarator
  body: (_)@body
  )@defun {
  node @body.scope
  attr (@body.scope)
    type = "pop_symbol",
    symbol = (source-text @name),
    source_node  = @defun,
    is_definition
}

(compound_statement (_)@expr)@comp {
  let @expr.scope = @comp.scope
}

(expression_statement (_)@expr)@expr_stmt {
  let @expr.scope = @expr_stmt.scope
}

(call_expression
  function: (identifier)@name
  arguments: (_)@args)@call_expr {
  node ref
  attr (ref)
    node_reference = @name
  edge ref -> @call_expr.scope
}
