;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference
attribute node_symbol = node            => symbol = (source-text node), source_node = node
attribute defkind = kind                => debug_defkind = kind
attribute refkind = kind                => debug_refkind = kind

;; initializations
[
    (block)@this
    (module)@this
    (identifier)@this
    (class_definition)@this
    (function_definition)@this
    (typed_parameter)@this
    (default_parameter)@this
    (typed_default_parameter)@this
    (parameters)@this
    (pass_statement)@this
] {
    node @this.scope
    node @this.pop_start
    node @this.push_start
    edge @this.scope -> @this.pop_start
}

;; root
(module)@this {
    edge ROOT_NODE -> @this.scope
    edge @this.scope -> ROOT_NODE
}

;; body
[
    (module (_)@child)@this
    (block (_)@child)@this
    (parameters (_)@child)@this
] {
    edge @child.scope -> @this.scope
    edge @this.pop_start -> @child.pop_start
}

;; identifiers
[
    (identifier)@this
] {
    attr (@this.pop_start) pop_node = @this
    attr (@this.push_start) push_node = @this
    let @this.pop_end = @this.pop_start
    let @this.push_end = @this.push_start
    edge @this.push_end -> @this.scope
}

;; classes

(class_definition
  name: (_)@name
)@this {
    attr (@name.pop_end) is_definition, defkind = "class"
}

;; functions

(function_definition
  name: (_)@name
)@this {
    attr (@name.pop_end) is_definition, defkind = "function"
}

;; named bodies
[
  (class_definition name: (_)@name body: (_)@body)@this
  (function_definition name: (_)@name body: (_)@body)@this
] {
  edge @name.scope -> @this.scope
  edge @this.pop_start -> @name.pop_start
  let @this.pop_end = @name.pop_end
  edge @body.scope -> @this.scope
  edge @name.pop_end -> @body.pop_start
}

;; parameters

(parameters
  (identifier)@name
)@this {
    attr (@name.pop_end) is_definition, defkind = "parameter"
}

[
    (typed_parameter (_)@name)@this
    (default_parameter name: (_)@name)@this
    (typed_default_parameter name: (_)@name)@this
] {
    edge @this.pop_start -> @name.pop_start
    attr (@name.pop_end) is_definition, defkind = "parameter"
}

;; named parameters
[
  (function_definition name: (_)@name parameters: (_)@parameters)@this
] {
  edge @parameters.scope -> @this.scope
  edge @name.pop_end -> @parameters.pop_start
  edge @name.scope -> @parameters.pop_start
}