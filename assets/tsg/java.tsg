;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference
attribute node_symbol = node            => symbol = (source-text node), source_node = node
attribute defkind = kind                => debug_defkind = kind
attribute refkind = kind                => debug_refkind = kind

;; program
(program)@program {
  node @program.scope
  node @program.defs
  node @program.central
  edge ROOT_NODE -> @program.central
  edge @program.central -> @program.scope
  edge @program.scope -> ROOT_NODE
  edge @program.scope -> @program.defs
}

(program (package_declaration (_)@id))@program {
  attr (@program.central)
    node_definition = @id,
    defkind = "package"
}

;; packages
(package_declaration)@package {
  node @package.scope
  node @package.defs
}

(program (_)@statement)@program {
  edge @program.defs -> @statement.defs
  edge @statement.scope -> @program.scope
}

;; classes
(class_declaration
  name: (_)@id
  body: (_)@body
)@class {
  node @class.scope
  node @class.defs
  edge @class.scope -> @class.defs

  node @class.central
  attr (@class.central)
    node_definition = @id,
    defkind = "class"
  edge @class.defs -> @class.central

  edge @body.scope -> @class.scope
  edge @class.central -> @body.defs
}

(class_declaration
  superclass: (superclass (type_identifier)@superclass)
)@class {
  node ref
  attr (ref)
    node_reference = @superclass,
    refkind = "extends"

  edge ref -> @class.scope
  edge @class.central -> ref
}

(class_declaration
  superclass: (superclass (scoped_type_identifier)@superclass)
)@class {
  attr (@superclass.top)
    refkind = "extends",
    is_reference

  edge @superclass.bottom -> @class.scope
  edge @class.central -> @superclass.bottom
}

(class_declaration
  interfaces: (super_interfaces (type_list (type_identifier)@superinterface))
)@class {
  node ref
  attr (ref)
    node_reference = @superinterface,
    refkind = "implements"

  edge ref -> @class.scope
  edge @class.central -> ref
}

(class_declaration
  interfaces: (super_interfaces (type_list (scoped_type_identifier)@superinterface))
)@class {
  attr (@superinterface.top)
    refkind = "implements",
    is_reference

  edge @superinterface.bottom -> @class.scope
  edge @class.central -> @superinterface.bottom
}

(class_body)@body {
  node @body.scope
  node @body.defs
}

(class_body (_)@statement)@body {
  edge @statement.scope -> @body.scope
  edge @body.defs -> @statement.defs
}

;; interfaces
(interface_declaration
  name: (_)@id
  body: (_)@body
)@interface {
  node @interface.scope
  node @interface.defs
  edge @interface.scope -> @interface.defs

  node @interface.central
  attr (@interface.central)
    node_definition = @id,
    defkind = "interface"
  edge @interface.defs -> @interface.central

  edge @body.scope -> @interface.scope
  edge @interface.central -> @body.defs
}

(interface_declaration
  (extends_interfaces (type_list (type_identifier)@superinterface))
)@interface {
  node ref
  attr (ref)
    node_reference = @superinterface,
    refkind = "extends"

  edge ref -> @interface.scope
  edge @interface.central -> ref
}

(interface_declaration
  (extends_interfaces (type_list (scoped_type_identifier)@superinterface))
)@interface {
  attr (@superinterface.top)
    refkind = "extends",
    is_reference

  edge @superinterface.bottom -> @interface.scope
  edge @interface.central -> @superinterface.bottom
}

(interface_body)@body {
  node @body.scope
  node @body.defs
}

(interface_body (_)@statement)@body {
  edge @statement.scope -> @body.scope
  edge @body.defs -> @statement.defs
}

;; scoped type identifier
(scoped_type_identifier
  (type_identifier)@scope
  (type_identifier)@name
)@scoped {
  node scope
  attr (scope)
    push_node = @scope
  
  node name
  attr (name)
    push_node = @name

  edge name -> scope
  edge scope -> name
  let @scoped.top = name
  let @scoped.bottom = scope
}

(scoped_type_identifier
  (scoped_type_identifier)@scope
  (type_identifier)@name
)@scoped {
  node name
  attr (name)
    push_node = @name

  edge name -> @scope.top
  edge @scope.top -> name
  let @scoped.top = name
  let @scoped.bottom = @scope.bottom
}

;; method declaration
(method_declaration
  name: (_)@name
)@method {
  node @method.scope
  node @method.defs
  node @method.central

  attr (@method.central)
    node_definition = @name,
    defkind = "function"
  
  edge @method.scope -> @method.defs
  edge @method.defs -> @method.central
}

(method_declaration
  parameters: (formal_parameters (_)@parameter)
)@method {
  edge @method.central -> @parameter.defs
  edge @parameter.scope -> @method.scope
}

(method_declaration
  body: (block (_)@instruction)
)@method {
  edge @method.central -> @instruction.defs
  edge @instruction.scope -> @method.scope
}

;; local variable declaration
(local_variable_declaration
  declarator: (_)@declarator
)@variable {
  node @variable.scope
  node @variable.defs
  node @variable.central

  attr (@variable.central)
    node_definition = @declarator,
    defkind = "attribute"
  
  edge @variable.scope -> @variable.defs
  edge @variable.defs -> @variable.central
}

;; field declaration
(field_declaration
  declarator: (_)@declarator
)@field {
  node @field.scope
  node @field.defs
  node @field.central

  attr (@field.central)
    node_definition = @declarator,
    defkind = "attribute"
  
  edge @field.scope -> @field.defs
  edge @field.defs -> @field.central
}

;; formal parameter
(formal_parameter
  name: (_)@name
)@parameter {
  node @parameter.scope
  node @parameter.defs
  node @parameter.central

  attr (@parameter.central)
    node_definition = @name,
    defkind = "parameter"
  
  edge @parameter.scope -> @parameter.defs
  edge @parameter.defs -> @parameter.central
}