;;;;;;;;;;;;;;;;;;;
;; Global Variables

global FILE_PATH
global ROOT_NODE
global JUMP_TO_SCOPE_NODE

;;;;;;;;;;;;;;;;;;;;;;;
;; Attribute Shorthands

attribute node_definition = node        => type = "pop_symbol", node_symbol = node, is_definition
attribute node_reference = node         => type = "push_symbol", node_symbol = node, is_reference
attribute pop_node = node               => type = "pop_symbol", node_symbol = node
attribute pop_scoped_node = node        => type = "pop_scoped_symbol", node_symbol = node
attribute pop_scoped_symbol = symbol    => type = "pop_scoped_symbol", symbol = symbol
attribute pop_symbol = symbol           => type = "pop_symbol", symbol = symbol
attribute push_node = node              => type = "push_symbol", node_symbol = node
attribute push_scoped_node = node       => type = "push_scoped_symbol", node_symbol = node
attribute push_scoped_symbol = symbol   => type = "push_scoped_symbol", symbol = symbol
attribute push_symbol = symbol          => type = "push_symbol", symbol = symbol
attribute scoped_node_definition = node => type = "pop_scoped_symbol", node_symbol = node, is_definition
attribute scoped_node_reference = node  => type = "push_scoped_symbol", node_symbol = node, is_reference
attribute symbol_definition = symbol    => type = "pop_symbol", symbol = symbol, is_definition
attribute symbol_reference = symbol     => type = "push_symbol", symbol = symbol, is_reference
attribute node_symbol = node            => symbol = (source-text node), source_node = node
attribute defkind = kind                => debug_defkind = kind
attribute refkind = kind                => debug_refkind = kind

;;; Unit
;;
;; a generic unit has
;;
;; - node.push_start: the entry point for push sequence
;; - node.push_end: the last point for push sequence
;; - node.pop_start: the entry point for pop sequence
;; - node.pop_end: the last point for pop sequence
;; - node.scope: the gateway of the unit
;;
;; these could be concrete nodes or variables which point to nodes
;; in case of a symbol unit push and pops are garanteed to be push and pops nodes

;; generics
[
  (program)@this
  (identifier)@this
  (this)@this
  (type_identifier)@this
  (annotation_type_declaration)@this
  (enum_declaration)@this
  (class_declaration)@this
  (interface_declaration)@this
  (method_declaration)@this
  (constructor_declaration)@this
  (field_declaration)@this
  (constant_declaration)@this
  (local_variable_declaration)@this
  (annotation_type_element_declaration)@this
  (formal_parameter)@this
  (class_body)@this
  (interface_body)@this
  (enum_body)@this
  (annotation_type_body)@this
  (block)@this
  (constructor_body)@this
  (formal_parameters)@this
  (enum_body_declarations)@this
  (enum_constant)@this
  (expression_statement)@this
  (return_statement)@this
  (binary_expression)@this
  (assignment_expression)@this
  (decimal_integer_literal)@this
  (true)@this
  (false)@this
  (string_literal)@this
  (null_literal)@this
  (void_type)@this
  (integral_type)@this
  (boolean_type)@this
  (line_comment)@this
  (block_comment)@this
  (method_invocation)@this
  (if_statement)@this
  (parenthesized_expression)@this
  (object_creation_expression)@this
  (throw_statement)@this
  (return_statement)@this
  (cast_expression)@this
  (array_creation_expression)@this
  (for_statement)@this
  (update_expression)@this
  (array_access)@this
  (while_statement)@this
  (explicit_constructor_invocation)@this
  (super)@this
  (argument_list)@this
] {
  node @this.scope
  node @this.pop_start
  node @this.push_start
  edge @this.scope -> @this.pop_start
}

[
  (void_type)@this
  (integral_type)@this
  (boolean_type)@this
] {
  attr (@this.push_start)
    push_node = @this
  let @this.push_end = @this.push_start
  let @this.pop_end = @this.pop_start
}

[
  (enum_declaration name: (_)@name body: (_)@body)@this
  (class_declaration name: (_)@name body: (_)@body)@this
  (interface_declaration name: (_)@name body: (_)@body)@this
  (annotation_type_declaration name: (_)@name body: (_)@body)@this
  (method_declaration name: (_)@name body: (_)@body)@this
  (constructor_declaration name: (_)@name body: (_)@body)@this
] {
  edge @name.scope -> @this.scope
  edge @this.pop_start -> @name.pop_start
  let @this.pop_end = @name.pop_end
  edge @body.scope -> @this.scope
  edge @name.pop_end -> @body.pop_start
}

[
  (class_body)@this
  (enum_body_declarations)@this
] {
  node @this.this
  attr (@this.this)
    pop_symbol = "this"
  edge @this.pop_start -> @this.this
}

[
  (class_body (_)@child)@this
  (enum_body_declarations (_)@child)@this
] {
  edge @this.this -> @child.pop_start
}

[
  (field_declaration declarator: (variable_declarator name: (_)@name))@this
  (constant_declaration declarator: (variable_declarator name: (_)@name))@this
  (local_variable_declaration declarator: (variable_declarator name: (_)@name))@this
  (formal_parameter name: (_)@name)@this
  (annotation_type_element_declaration name: (_)@name)@this
  (package_declaration (_)@name)@this
  (enum_constant name: (_)@name)@this
] {
  edge @name.scope -> @this.scope
  edge @this.pop_start -> @name.pop_start
}

[
  (program (_)@child)@this
  (class_body (_)@child)@this
  (annotation_type_body (_)@child)@this
  (interface_body (_)@child)@this
  (enum_body (_)@child)@this
  (block (_)@child)@this
  (constructor_body (_)@child)@this
  (formal_parameters (_)@child)@this
  (enum_body_declarations (_)@child)@this
  (expression_statement (_)@child)@this
  (return_statement (_)@child)@this
  (binary_expression left: (_)@child)@this
  (assignment_expression left: (_)@child)@this
  (binary_expression right: (_)@child)@this
  (assignment_expression right: (_)@child)@this
  (array_type element: (_)@child)@this
  (if_statement condition: (_)@child)@this
  (if_statement consequence: (_)@child)@this
  (if_statement alternative: (_)@child)@this
  (parenthesized_expression (_)@child)@this
  (throw_statement (_)@child)@this
  (return_statement (_)@child)@this
  (cast_expression value: (_)@child)@this
  (for_statement init: (_)@child)@this
  (for_statement condition: (_)@child)@this
  (for_statement update: (_)@child)@this
  (for_statement body: (_)@child)@this
  (update_expression (_)@child)@this
  (array_access array: (_)@child)@this
  (array_access index: (_)@child)@this
  (while_statement condition: (_)@child)@this
  (while_statement body: (_)@child)@this
  (explicit_constructor_invocation (_)@child)@this
  (argument_list (_)@child)@this
] {
  edge @child.scope -> @this.scope
  edge @this.pop_start -> @child.pop_start
}

[
  (method_declaration name: (_)@name parameters: (_)@parameters)@this
  (constructor_declaration name: (_)@name parameters: (_)@parameters)@this
] {
  edge @parameters.scope -> @this.scope
  edge @name.pop_end -> @parameters.pop_start
  edge @name.scope -> @parameters.pop_start
}

[
  (method_declaration name: (_)@name body: (_)@body)@this
  (constructor_declaration name: (_)@name body: (_)@body)@this
] {
  edge @body.scope -> @name.push_start
}

[
  (class_declaration superclass: (superclass (_)@super))@this
  (interface_declaration (extends_interfaces (type_list (_)@super)))@this
] {
  attr (@super.push_start)
    is_reference, refkind = "extends"
  edge @this.pop_end -> @super.push_start
  edge @super.push_end -> @this.scope
}

[
  (class_declaration interfaces: (super_interfaces (type_list (_)@super)))@this
] {
  attr (@super.push_start)
    is_reference, refkind = "implements"
  edge @this.pop_end -> @super.push_start
  edge @super.push_end -> @this.scope
}

[
  (method_declaration type: (_)@type name: (_)@name)@this
  (field_declaration type: (_)@type declarator: (variable_declarator name: (_)@name))@this
  (constant_declaration type: (_)@type declarator: (variable_declarator name: (_)@name))@this
  (local_variable_declaration type: (_)@type declarator: (variable_declarator name: (_)@name))@this
  (formal_parameter type: (_)@type name: (_)@name)@this
  (annotation_type_element_declaration type: (_)@type name: (_)@name)@this
] {
  attr (@type.push_start)
    is_reference, refkind = "usesType"

  edge @type.push_end -> @this.scope
  edge @name.pop_end -> @type.push_start
}

[
  (object_creation_expression type: (_)@type)@this
  (cast_expression type: (_)@type)@this
  (array_creation_expression type: (_)@type)@this
] {
  attr (@type.push_start)
    is_reference, refkind = "usesType"
  edge @this.pop_start -> @type.push_start
  edge @type.push_start -> @this.scope
  let @this.push_end = @type.push_end
}

;; identifiers
[
  (identifier)@this
  (type_identifier)@this
] {
  attr (@this.pop_start)
    node_definition = @this
  let @this.pop_end = @this.pop_start

  attr (@this.push_start)
    push_node = @this
  let @this.push_end = @this.push_start
  edge @this.push_end -> @this.scope
}

;; this
[
  (this)@this
] {
  let @this.pop_end = @this.pop_start

  attr (@this.push_start)
    push_symbol = "this"
  let @this.push_end = @this.push_start
  edge @this.push_end -> @this.scope
}

;; scoped_identifier
[
  (scoped_identifier scope: (_)@scope name: (_)@name)@this
  (scoped_type_identifier (_)@scope (_)@name)@this
] {
  node @this.scope
  edge @scope.pop_end -> @name.pop_start
  edge @name.push_end -> @scope.push_start
  let @this.pop_start = @scope.pop_start
  let @this.pop_end = @name.pop_end
  let @this.push_start = @name.push_start
  let @this.push_end = @scope.push_end
  edge @this.scope -> @this.pop_start
  edge @this.push_end -> @this.scope
}

;; field access
(field_access object: (_)@object field: (_)@field)@this {
  node @this.scope
  node @this.pop_start
  node @this.pop_end
  edge @field.push_end -> @object.push_start
  let @this.push_start = @field.push_start
  let @this.push_end = @object.push_end
  edge @this.push_end -> @this.scope
  edge @this.pop_start -> @this.push_start
  attr (@field.push_start)
    is_reference, refkind = "accessField"
}

;; imports
(program
  (import_declaration
    (_)@name
  )@this
)@parent {
  node @this.scope
  attr (@name.push_start) is_reference, refkind = "includes"
  let @this.pop_end = (node)
  let @this.push_start = (node)
  let @this.push_end = (node) 

  let @this.pop_start = @name.pop_end
  edge @this.pop_start -> @name.push_start
  edge @name.push_end -> @parent.scope
  edge @this.scope -> @this.pop_start
}

;; packages
(package_declaration
  (_)@name
)@this {
  node @this.scope
  attr (@name.pop_end) defkind = "package"
  let @this.pop_start = @name.pop_start
  let @this.pop_end = @name.pop_end
  let @this.push_start = @name.push_start
  let @this.push_end = @name.push_end
  edge @this.scope -> @this.pop_start
  edge @this.push_end -> @this.scope
}

(program
  (package_declaration)? @package
)@this {
  if some @package {
    edge ROOT_NODE -> @package.pop_start
    edge @package.pop_end -> @this.scope
    edge @this.scope -> @package.push_start
    edge @package.push_end -> ROOT_NODE
    edge @this.scope -> ROOT_NODE
  } else {
    edge ROOT_NODE -> @this.scope
    edge @this.scope -> ROOT_NODE
  }
}

;; classes
(class_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "class"
}

;; interfaces
(interface_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "interface"
}

;; enums
(enum_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "enum"
}

;; annotations
(annotation_type_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "annotation"
}

;; methods
(method_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "function"
}

;; constructor
(constructor_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "function"
}

;; fields
(field_declaration
  declarator: (variable_declarator name: (_)@name)
)@this {
  attr (@name.pop_end) defkind = "attribute"
}

;; constants
(constant_declaration
  declarator: (variable_declarator name: (_)@name)
)@this {
  attr (@name.pop_end) defkind = "constant"
}

;; annotation_elements
(annotation_type_element_declaration
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "annotationElement"
}

;; parameters
(formal_parameter
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "parameter"
}

;; local_variable_declaration
(local_variable_declaration
  declarator: (variable_declarator name: (_)@name)
)@this {
  attr (@name.pop_end) defkind = "attribute"
}

;; enum_constant
(enum_constant
  name: (_)@name
)@this {
  attr (@name.pop_end) defkind = "enumVariant"
}

;; method_invocation
(method_invocation object: (_)? @object name: (_)@name)@this {
  if some @object {
    attr (@name.push_start)
      is_reference, refkind = "calls"
    edge @this.push_start -> @name.push_start
    edge @name.push_end -> @object.push_start
    edge @object.push_end -> @this.scope
    edge @this.pop_start -> @name.push_start
    let @this.push_end = @object.push_end
  } else {
    attr (@name.push_start)
      is_reference, refkind = "calls"
    edge @this.push_start -> @name.push_start
    edge @name.push_end -> @this.scope
    edge @this.pop_start -> @name.push_start
    let @this.push_end = @name.push_end
  }
}

;; field access against identifier
[
  (binary_expression left: (identifier)@child)@this
  (assignment_expression left: (identifier)@child)@this
  (binary_expression right: (identifier)@child)@this
  (assignment_expression right: (identifier)@child)@this
  (array_access array: (identifier)@child)@this
  (argument_list (identifier)@child)@this
] {
  attr (@child.push_start)
    is_reference, refkind = "accessField"
  edge @this.pop_start -> @child.push_start
}

;; field access against identifier
[
  (array_type element: (_)@child)@this
] {
  node @this.scope
  let @this.pop_start =  @child.push_start
  let @this.push_start =  @child.push_start
  let @this.push_end = @child.push_end
  let @this.pop_end = @child.pop_end
  edge @this.scope -> @this.pop_start
  edge @this.push_end -> @this.scope
}
